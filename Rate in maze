#include<iostream>
using namespace std;

bool isSafe(int arr[4][4], int x, int y, int n, int visited[4][4]) {
    return (x >= 0 && x < n && y >= 0 && y < n && visited[x][y]==0 && arr[x][y] == 1);
}

bool solve(int arr[4][4], int n, int x, int y, int visited[4][4]) {
    if (x == n - 1 && y == n - 1) {
        // Mark the destination cell as visited
        visited[x][y] = 1;
        return true;
    }

    // Mark the current cell as visited
    visited[x][y] = 1;

    // Move down (x++, y)
    if (isSafe(arr, x + 1, y, n, visited) && solve(arr, n, x + 1, y, visited)) {
        return true;
    }

    // Move left (x, y--)
    if (isSafe(arr, x, y - 1, n, visited) && solve(arr, n, x, y - 1, visited)) {
        return true;
    }

    // Move right (x, y++)
    if (isSafe(arr, x, y + 1, n, visited) && solve(arr, n, x, y + 1, visited)) {
        return true;
    }

    // Move up (x--, y)
    if (isSafe(arr, x - 1, y, n, visited) && solve(arr, n, x - 1, y, visited)) {
        return true;
    }

    // If none of the directions lead to a solution, backtrack
    visited[x][y] = 0;
    return false;
}

void ratInMaze(int arr[4][4], int n) {
    int visited[4][4] = { {0, 0, 0, 0},
                          {0, 0, 0, 0},
                          {0, 0, 0, 0},
                          {0, 0, 0, 0} };

    int x = 0, y = 0;

    if (solve(arr, n, x, y, visited)) {
        // Print the solution (path)
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cout << visited[i][j] << " ";
            }
            cout << endl;
        }
    } else {
        cout << "NO SOL" << endl;
    }
}

int main() {
    int arr[4][4] = { {1, 0, 0, 0},
                     {1, 1, 0, 0},
                     {1, 1, 0, 0},
                     {0, 1, 1, 1} };

    ratInMaze(arr, 4);

    return 0;
}
