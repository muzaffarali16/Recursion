#include <iostream>
using namespace std;

const int N = 8; // Size of the chessboard (8x8)

int dx[] = {-2, -1, 1, 2, 2, 1, -1, -2};
int dy[] = {1, 2, 2, 1, -1, -2, -2, -1};

bool isSafe(int x, int y, int sol[N][N]) {
    return (x >= 0 && x < N && y >= 0 && y < N && sol[x][y] == -1);
}

void printSolution(int sol[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << sol[i][j] << "   ";
        }
        cout << endl;
    }
}

bool solveKT(int x, int y, int movei, int sol[N][N]) {
    if (movei == N * N) {
        return true; // All squares have been visited
    }

    for (int k = 0; k < 8; k++) {
        int newx = x + dx[k];
        int newy = y + dy[k];
        
        if (isSafe(newx, newy, sol)) {
            sol[newx][newy] = movei;
            if (solveKT(newx, newy, movei + 1, sol)) {
                return true; // If the next move leads to a solution
            } else {
                sol[newx][newy] = -1; // Backtrack
            }
        }
    }
    return false; // If no move leads to a solution
}

bool knightTour() {
    int sol[N][N];
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            sol[i][j] = -1; // Initialize the solution matrix
        }
    }

    // Starting position
    int startx = 0;
    int starty = 0;
    sol[startx][starty] = 0; // Mark the starting square as visited

    if (solveKT(startx, starty, 1, sol)) {
        cout << "Solution exists:" << endl;
        printSolution(sol);
        return true;
    } else {
        cout << "No solution exists." << endl;
        return false;
    }
}

int main() {
    knightTour();
    return 0;
}
